" vim:foldmethod=marker

" Vim configuration {{{

syntax on
set background=dark
set termguicolors
colorscheme base16-tomorrow-night
highlight SpellBad   ctermbg=0  ctermfg=1
highlight SpellCap   ctermbg=0  ctermfg=9
highlight SpellRare  ctermfg=10
highlight SpellLocal ctermfg=15

packadd! matchit

set ruler
set showmode
set showcmd
set number
set signcolumn=number

set incsearch
set ignorecase
set smartcase

set backspace=indent,eol,start
set whichwrap=b,s,<,>,[,]
set re=0

set nowrap
autocmd FileType text setlocal textwidth=80

set mouse=a
set mousehide

set shiftwidth=2
set softtabstop=2
set tabstop=2
set smarttab
set expandtab
set shiftround
autocmd FileType python setlocal sw=4 sts=4 et

set novisualbell
set noerrorbells
set vb t_vb=
set updatetime=300

set hidden
set autowrite
set autoread
set nobackup
set nowritebackup
set noswapfile

set splitbelow
set splitright

set laststatus=2
set cmdheight=2
set shortmess+=c

set history=1000
set undolevels=1000

set path+=**
set wildignore=*.o,*.pyc,*.class,*.d,*/.git/*,*/node_modules/*,.DS_Store
set wildmenu

set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
set grepformat=%f:%l:%c:%m,%f:%l:%m

" }}}

" Custom filetypes {{{

autocmd BufRead,BufNewFile *.gyp      set filetype=python et ts=2 sw=2
autocmd BufRead,BufNewFile *.gypi     set filetype=python et ts=2 sw=2
autocmd BufRead,BufNewFile DEPS       set filetype=python et ts=2 sw=2
autocmd BufRead,BufNewFile .eslintrc  set filetype=json
autocmd BufRead,BufNewFile .babelrc   set filetype=json
autocmd BufRead,BufNewFile *.tsx      set filetype=typescript.tsx
autocmd BufRead,BufNewFile *.js,*.jsx set filetype=javascript.tsx

" }}}

" Spell checking {{{

autocmd FileType gitcommit setlocal spell
autocmd FileType text      setlocal spell
autocmd FileType plaintex  setlocal spell
autocmd FileType tex       setlocal spell
autocmd FileType markdown  setlocal spell
autocmd FileType rst       setlocal spell

" }}}

" Markdown settings {{{

let g:markdown_fenced_languages = [
  \ 'js=javascript', 'javascript', 'ts=typescript', 'typescript',
  \ 'html', 'css', 'c', 'cpp', 'c++=cpp', 'viml=vim', 'python',
  \ 'sh', 'bash=sh', 'console=sh', 'ini=dosini'
  \ ]

" }}}

" Airline settings {{{

let g:airline_theme='base16_tomorrow'

" }}}

" ALE settings {{{

let g:ale_disable_lsp = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_fixers = {
      \   'javascript':     ['eslint', 'prettier'],
      \   'javascript.jsx': ['eslint', 'prettier'],
      \   'typescript':     ['eslint', 'prettier'],
      \   'typescript.tsx': ['eslint', 'prettier'],
      \ }

" }}}

" Keybindings {{{

" Setup a convenient leader key
let mapleader = ' '

" Show and hide search highlighting
nmap <leader>/ :set hlsearch!<CR>

" Window management
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <leader>q :close<CR>

" Git keybindings
nnoremap <leader>g :Git<CR>

" Show the undo tree
nnoremap <leader>u :UndotreeToggle<CR>

" Prettier keybindings
nnoremap <leader>p :PrettierAsync<CR>

" Save buffer
nnoremap <leader>w :w<CR>
nnoremap <C-e> :Prettier<CR>:w<CR>

" Find files and buffers with fzf
nnoremap <C-p> :Files<CR>
nnoremap <C-n> :Buffers<CR>

" Grep for files
nnoremap <C-s> :grep<Space>
nnoremap <leader>K :grep "\b<C-R><C-W>\b"<CR>:cw<CR>

" Open and close quickfix/location lists
nnoremap <esc>c :copen<CR>
nnoremap <esc>C :close<CR>
nnoremap <esc>l :lopen<CR>
nnoremap <esc>L :lclose<CR>

" Switch between dark and light themes
function s:set_dark()
  set background=dark
  colorscheme base16-tomorrow-night
endfunction

command Dark :call <SID>set_dark()

function s:set_light()
  set background=light
  colorscheme base16-tomorrow
endfunction

command Light :call <SID>set_light()

" }}}

" Coc settings and keybindings{{{

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <c-@> coc#refresh()

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  autocmd FileType javascript,typescript,json setl formatexpr=CocAction('formatSelected')
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

xmap <leader>fs <Plug>(coc-format-selected)
nmap <leader>fs <Plug>(coc-format-selected)
nmap <leader>r  <Plug>(coc-rename)
xmap <leader>s  <Plug>(coc-codeaction-selected)
nmap <leader>s  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction)
nmap <leader>z  <Plug>(coc-fix-current)

xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

nnoremap <expr><C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <expr><C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <expr><C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<Right>"
inoremap <expr><C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<Left>"

nmap <silent> <Bslash>         <Plug>(coc-range-select)
xmap <silent> <Bslash>         <Plug>(coc-range-select)
nmap <silent> <leader><Bslash> <Plug>(coc-range-select-backward)
xmap <silent> <leader><Bslash> <Plug>(coc-range-select-backward)

command! -nargs=0 Format :call CocAction('format')
command! -nargs=? Fold   :call CocAction('fold', <f-args>)
command! -nargs=0 OR     :call CocAction('runCommand', 'editor.action.organizeImport')

nnoremap <leader>ff :Format<CR>
nnoremap <leader>fo :Fold<CR>
nnoremap <leader>o  :OR<CR>

nnoremap <silent><nowait> <leader>cld :<C-u>CocList diagnostics<cr>
nnoremap <silent><nowait> <leader>clo :<C-u>CocList outline<cr>
nnoremap <silent><nowait> <leader>cls :<C-u>CocList -I symbols<cr>
nnoremap <silent><nowait> <leader>j   :<C-u>CocNext<CR>
nnoremap <silent><nowait> <leader>k   :<C-u>CocPrev<CR>
nnoremap <silent><nowait> <leader>clr :<C-u>CocListResume<CR>

" }}}
